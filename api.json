{
  "openapi": "3.0.0",
  "paths": {
    "/assistant": {
      "post": {
        "operationId": "AssistantController_create",
        "summary": "Create Assistant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "AssistantController_findAll",
        "summary": "List Assistants",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assistant"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assistant/{id}": {
      "get": {
        "operationId": "AssistantController_findOne",
        "summary": "Get Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "AssistantController_update",
        "summary": "Update Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssistantDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AssistantController_remove",
        "summary": "Delete Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/call": {
      "get": {
        "operationId": "CallController_findAll",
        "summary": "List Calls",
        "parameters": [
          {
            "name": "assistantId",
            "required": false,
            "in": "query",
            "description": "This will return calls with the specified assistantId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Call"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/call/{id}": {
      "get": {
        "operationId": "CallController_findOne",
        "summary": "Get Call",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CallController_deleteCallData",
        "summary": "Delete Call Data",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CallController_update",
        "summary": "Update Call",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/call/phone": {
      "post": {
        "operationId": "CallController_createPhoneCall",
        "summary": "Create Phone Call",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutboundCallDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credential": {
      "post": {
        "operationId": "CredentialController_create",
        "summary": "Create Credential",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateAnthropicCredentialDTO",
                    "title": "AnthropicCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateAnyscaleCredentialDTO",
                    "title": "AnyscaleCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateAzureOpenAICredentialDTO",
                    "title": "AzureOpenAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateCartesiaCredentialDTO",
                    "title": "CartesiaCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateCustomLLMCredentialDTO",
                    "title": "CustomLLMCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateDeepgramCredentialDTO",
                    "title": "DeepgramCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateDeepInfraCredentialDTO",
                    "title": "DeepInfraCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateElevenLabsCredentialDTO",
                    "title": "ElevenLabsCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateGoHighLevelCredentialDTO",
                    "title": "GhlCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateGroqCredentialDTO",
                    "title": "GroqCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateLmntCredentialDTO",
                    "title": "LmntCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateMakeCredentialDTO",
                    "title": "MakeCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateOpenAICredentialDTO",
                    "title": "OpenAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateOpenRouterCredentialDTO",
                    "title": "OpenRouterCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreatePerplexityAICredentialDTO",
                    "title": "PerplexityAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreatePlayHTCredentialDTO",
                    "title": "PlayHTCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateRimeAICredentialDTO",
                    "title": "RimeAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateRunpodCredentialDTO",
                    "title": "RunpodCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateTogetherAICredentialDTO",
                    "title": "TogetherAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateTwilioCredentialDTO",
                    "title": "TwilioCredential"
                  },
                  {
                    "$ref": "#/components/schemas/CreateVonageCredentialDTO",
                    "title": "VonageCredential"
                  }
                ],
                "discriminator": {
                  "propertyName": "provider",
                  "mapping": {
                    "11labs": "#/components/schemas/CreateElevenLabsCredentialDTO",
                    "anthropic": "#/components/schemas/CreateAnthropicCredentialDTO",
                    "anyscale": "#/components/schemas/CreateAnyscaleCredentialDTO",
                    "azure-openai": "#/components/schemas/CreateAzureOpenAICredentialDTO",
                    "cartesia": "#/components/schemas/CreateCartesiaCredentialDTO",
                    "custom-llm": "#/components/schemas/CreateCustomLLMCredentialDTO",
                    "deepgram": "#/components/schemas/CreateDeepgramCredentialDTO",
                    "deepinfra": "#/components/schemas/CreateDeepInfraCredentialDTO",
                    "gohighlevel": "#/components/schemas/CreateGoHighLevelCredentialDTO",
                    "groq": "#/components/schemas/CreateGroqCredentialDTO",
                    "lmnt": "#/components/schemas/CreateLmntCredentialDTO",
                    "make": "#/components/schemas/CreateMakeCredentialDTO",
                    "openai": "#/components/schemas/CreateOpenAICredentialDTO",
                    "openrouter": "#/components/schemas/CreateOpenRouterCredentialDTO",
                    "perplexity-ai": "#/components/schemas/CreatePerplexityAICredentialDTO",
                    "playht": "#/components/schemas/CreatePlayHTCredentialDTO",
                    "rime-ai": "#/components/schemas/CreateRimeAICredentialDTO",
                    "runpod": "#/components/schemas/CreateRunpodCredentialDTO",
                    "together-ai": "#/components/schemas/CreateTogetherAICredentialDTO",
                    "twilio": "#/components/schemas/CreateTwilioCredentialDTO",
                    "vonage": "#/components/schemas/CreateVonageCredentialDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AnyscaleCredential",
                      "title": "AnyscaleCredential"
                    },
                    {
                      "$ref": "#/components/schemas/AzureOpenAICredential",
                      "title": "AzureOpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/CartesiaCredential",
                      "title": "CartesiaCredential"
                    },
                    {
                      "$ref": "#/components/schemas/CustomLLMCredential",
                      "title": "CustomLLMCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepgramCredential",
                      "title": "DeepgramCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepInfraCredential",
                      "title": "DeepInfraCredential"
                    },
                    {
                      "$ref": "#/components/schemas/ElevenLabsCredential",
                      "title": "ElevenLabsCredential"
                    },
                    {
                      "$ref": "#/components/schemas/GoHighLevelCredential",
                      "title": "GhlCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateGroqCredentialDTO",
                      "title": "GroqCredential"
                    },
                    {
                      "$ref": "#/components/schemas/LmntCredential",
                      "title": "LmntCredential"
                    },
                    {
                      "$ref": "#/components/schemas/MakeCredential",
                      "title": "MakeCredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenAICredential",
                      "title": "OpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenRouterCredential",
                      "title": "OpenRouterCredential"
                    },
                    {
                      "$ref": "#/components/schemas/PerplexityAICredential",
                      "title": "PerplexityAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/PlayHTCredential",
                      "title": "PlayHTCredential"
                    },
                    {
                      "$ref": "#/components/schemas/RimeAICredential",
                      "title": "RimeAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateAnthropicCredentialDTO",
                      "title": "AnthropicCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateRunpodCredentialDTO",
                      "title": "RunpodCredential"
                    },
                    {
                      "$ref": "#/components/schemas/TogetherAICredential",
                      "title": "TogetherAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioCredential",
                      "title": "TwilioCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateVonageCredentialDTO",
                      "title": "VonageCredential"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "11labs": "#/components/schemas/ElevenLabsCredential",
                      "anthropic": "#/components/schemas/AnthropicCredential",
                      "anyscale": "#/components/schemas/AnyscaleCredential",
                      "azure-openai": "#/components/schemas/AzureOpenAICredential",
                      "cartesia": "#/components/schemas/CartesiaCredential",
                      "custom-llm": "#/components/schemas/CustomLLMCredential",
                      "deepgram": "#/components/schemas/DeepgramCredential",
                      "deepinfra": "#/components/schemas/DeepInfraCredential",
                      "gohighlevel": "#/components/schemas/GoHighLevelCredential",
                      "groq": "#/components/schemas/GroqCredential",
                      "lmnt": "#/components/schemas/LmntCredential",
                      "make": "#/components/schemas/MakeCredential",
                      "openai": "#/components/schemas/OpenAICredential",
                      "openrouter": "#/components/schemas/OpenRouterCredential",
                      "perplexity-ai": "#/components/schemas/PerplexityAICredential",
                      "playht": "#/components/schemas/PlayHTCredential",
                      "rime-ai": "#/components/schemas/RimeAICredential",
                      "runpod": "#/components/schemas/RunpodCredential",
                      "together-ai": "#/components/schemas/TogetherAICredential",
                      "twilio": "#/components/schemas/TwilioCredential",
                      "vonage": "#/components/schemas/VonageCredential"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Credentials"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CredentialController_findAll",
        "summary": "List Credentials",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/AnyscaleCredential",
                        "title": "AnyscaleCredential"
                      },
                      {
                        "$ref": "#/components/schemas/AzureOpenAICredential",
                        "title": "AzureOpenAICredential"
                      },
                      {
                        "$ref": "#/components/schemas/CartesiaCredential",
                        "title": "CartesiaCredential"
                      },
                      {
                        "$ref": "#/components/schemas/CustomLLMCredential",
                        "title": "CustomLLMCredential"
                      },
                      {
                        "$ref": "#/components/schemas/DeepgramCredential",
                        "title": "DeepgramCredential"
                      },
                      {
                        "$ref": "#/components/schemas/DeepInfraCredential",
                        "title": "DeepInfraCredential"
                      },
                      {
                        "$ref": "#/components/schemas/ElevenLabsCredential",
                        "title": "ElevenLabsCredential"
                      },
                      {
                        "$ref": "#/components/schemas/GoHighLevelCredential",
                        "title": "GhlCredential"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateGroqCredentialDTO",
                        "title": "GroqCredential"
                      },
                      {
                        "$ref": "#/components/schemas/LmntCredential",
                        "title": "LmntCredential"
                      },
                      {
                        "$ref": "#/components/schemas/MakeCredential",
                        "title": "MakeCredential"
                      },
                      {
                        "$ref": "#/components/schemas/OpenAICredential",
                        "title": "OpenAICredential"
                      },
                      {
                        "$ref": "#/components/schemas/OpenRouterCredential",
                        "title": "OpenRouterCredential"
                      },
                      {
                        "$ref": "#/components/schemas/PerplexityAICredential",
                        "title": "PerplexityAICredential"
                      },
                      {
                        "$ref": "#/components/schemas/PlayHTCredential",
                        "title": "PlayHTCredential"
                      },
                      {
                        "$ref": "#/components/schemas/RimeAICredential",
                        "title": "RimeAICredential"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateAnthropicCredentialDTO",
                        "title": "AnthropicCredential"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateRunpodCredentialDTO",
                        "title": "RunpodCredential"
                      },
                      {
                        "$ref": "#/components/schemas/TogetherAICredential",
                        "title": "TogetherAICredential"
                      },
                      {
                        "$ref": "#/components/schemas/TwilioCredential",
                        "title": "TwilioCredential"
                      },
                      {
                        "$ref": "#/components/schemas/UpdateVonageCredentialDTO",
                        "title": "VonageCredential"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "provider",
                      "mapping": {
                        "11labs": "#/components/schemas/ElevenLabsCredential",
                        "anthropic": "#/components/schemas/AnthropicCredential",
                        "anyscale": "#/components/schemas/AnyscaleCredential",
                        "azure-openai": "#/components/schemas/AzureOpenAICredential",
                        "cartesia": "#/components/schemas/CartesiaCredential",
                        "custom-llm": "#/components/schemas/CustomLLMCredential",
                        "deepgram": "#/components/schemas/DeepgramCredential",
                        "deepinfra": "#/components/schemas/DeepInfraCredential",
                        "gohighlevel": "#/components/schemas/GoHighLevelCredential",
                        "groq": "#/components/schemas/GroqCredential",
                        "lmnt": "#/components/schemas/LmntCredential",
                        "make": "#/components/schemas/MakeCredential",
                        "openai": "#/components/schemas/OpenAICredential",
                        "openrouter": "#/components/schemas/OpenRouterCredential",
                        "perplexity-ai": "#/components/schemas/PerplexityAICredential",
                        "playht": "#/components/schemas/PlayHTCredential",
                        "rime-ai": "#/components/schemas/RimeAICredential",
                        "runpod": "#/components/schemas/RunpodCredential",
                        "together-ai": "#/components/schemas/TogetherAICredential",
                        "twilio": "#/components/schemas/TwilioCredential",
                        "vonage": "#/components/schemas/VonageCredential"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Credentials"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credential/{id}": {
      "get": {
        "operationId": "CredentialController_findOne",
        "summary": "Get Credential",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AnyscaleCredential",
                      "title": "AnyscaleCredential"
                    },
                    {
                      "$ref": "#/components/schemas/AzureOpenAICredential",
                      "title": "AzureOpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/CartesiaCredential",
                      "title": "CartesiaCredential"
                    },
                    {
                      "$ref": "#/components/schemas/CustomLLMCredential",
                      "title": "CustomLLMCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepgramCredential",
                      "title": "DeepgramCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepInfraCredential",
                      "title": "DeepInfraCredential"
                    },
                    {
                      "$ref": "#/components/schemas/ElevenLabsCredential",
                      "title": "ElevenLabsCredential"
                    },
                    {
                      "$ref": "#/components/schemas/GoHighLevelCredential",
                      "title": "GhlCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateGroqCredentialDTO",
                      "title": "GroqCredential"
                    },
                    {
                      "$ref": "#/components/schemas/LmntCredential",
                      "title": "LmntCredential"
                    },
                    {
                      "$ref": "#/components/schemas/MakeCredential",
                      "title": "MakeCredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenAICredential",
                      "title": "OpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenRouterCredential",
                      "title": "OpenRouterCredential"
                    },
                    {
                      "$ref": "#/components/schemas/PerplexityAICredential",
                      "title": "PerplexityAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/PlayHTCredential",
                      "title": "PlayHTCredential"
                    },
                    {
                      "$ref": "#/components/schemas/RimeAICredential",
                      "title": "RimeAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateAnthropicCredentialDTO",
                      "title": "AnthropicCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateRunpodCredentialDTO",
                      "title": "RunpodCredential"
                    },
                    {
                      "$ref": "#/components/schemas/TogetherAICredential",
                      "title": "TogetherAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioCredential",
                      "title": "TwilioCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateVonageCredentialDTO",
                      "title": "VonageCredential"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "11labs": "#/components/schemas/ElevenLabsCredential",
                      "anthropic": "#/components/schemas/AnthropicCredential",
                      "anyscale": "#/components/schemas/AnyscaleCredential",
                      "azure-openai": "#/components/schemas/AzureOpenAICredential",
                      "cartesia": "#/components/schemas/CartesiaCredential",
                      "custom-llm": "#/components/schemas/CustomLLMCredential",
                      "deepgram": "#/components/schemas/DeepgramCredential",
                      "deepinfra": "#/components/schemas/DeepInfraCredential",
                      "gohighlevel": "#/components/schemas/GoHighLevelCredential",
                      "groq": "#/components/schemas/GroqCredential",
                      "lmnt": "#/components/schemas/LmntCredential",
                      "make": "#/components/schemas/MakeCredential",
                      "openai": "#/components/schemas/OpenAICredential",
                      "openrouter": "#/components/schemas/OpenRouterCredential",
                      "perplexity-ai": "#/components/schemas/PerplexityAICredential",
                      "playht": "#/components/schemas/PlayHTCredential",
                      "rime-ai": "#/components/schemas/RimeAICredential",
                      "runpod": "#/components/schemas/RunpodCredential",
                      "together-ai": "#/components/schemas/TogetherAICredential",
                      "twilio": "#/components/schemas/TwilioCredential",
                      "vonage": "#/components/schemas/VonageCredential"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Credentials"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "CredentialController_update",
        "summary": "Update Credential",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateAnyscaleCredentialDTO",
                    "title": "AnyscaleCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateAnthropicCredentialDTO",
                    "title": "AnthropicCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateAzureOpenAICredentialDTO",
                    "title": "AzureOpenAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateCartesiaCredentialDTO",
                    "title": "CartesiaCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateCustomLLMCredentialDTO",
                    "title": "CustomLLMCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateDeepgramCredentialDTO",
                    "title": "DeepgramCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateDeepInfraCredentialDTO",
                    "title": "DeepInfraCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateElevenLabsCredentialDTO",
                    "title": "ElevenLabsCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateGoHighLevelCredentialDTO",
                    "title": "GhlCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateGroqCredentialDTO",
                    "title": "GroqCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateLmntCredentialDTO",
                    "title": "LmntCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateMakeCredentialDTO",
                    "title": "MakeCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateOpenAICredentialDTO",
                    "title": "OpenAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateOpenRouterCredentialDTO",
                    "title": "OpenRouterCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdatePerplexityAICredentialDTO",
                    "title": "PerplexityAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdatePlayHTCredentialDTO",
                    "title": "PlayHTCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateRimeAICredentialDTO",
                    "title": "RimeAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateRunpodCredentialDTO",
                    "title": "RunpodCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateTogetherAICredentialDTO",
                    "title": "TogetherAICredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateTwilioCredentialDTO",
                    "title": "TwilioCredential"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateVonageCredentialDTO",
                    "title": "VonageCredential"
                  }
                ],
                "discriminator": {
                  "propertyName": "provider",
                  "mapping": {
                    "11labs": "#/components/schemas/UpdateElevenLabsCredentialDTO",
                    "anthropic": "#/components/schemas/UpdateAnthropicCredentialDTO",
                    "anyscale": "#/components/schemas/UpdateAnyscaleCredentialDTO",
                    "azure-openai": "#/components/schemas/UpdateAzureOpenAICredentialDTO",
                    "cartesia": "#/components/schemas/UpdateCartesiaCredentialDTO",
                    "custom-llm": "#/components/schemas/UpdateCustomLLMCredentialDTO",
                    "deepgram": "#/components/schemas/UpdateDeepgramCredentialDTO",
                    "deepinfra": "#/components/schemas/UpdateDeepInfraCredentialDTO",
                    "gohighlevel": "#/components/schemas/UpdateGoHighLevelCredentialDTO",
                    "groq": "#/components/schemas/UpdateGroqCredentialDTO",
                    "lmnt": "#/components/schemas/UpdateLmntCredentialDTO",
                    "make": "#/components/schemas/UpdateMakeCredentialDTO",
                    "openai": "#/components/schemas/UpdateOpenAICredentialDTO",
                    "openrouter": "#/components/schemas/UpdateOpenRouterCredentialDTO",
                    "perplexity-ai": "#/components/schemas/UpdatePerplexityAICredentialDTO",
                    "playht": "#/components/schemas/UpdatePlayHTCredentialDTO",
                    "rime-ai": "#/components/schemas/UpdateRimeAICredentialDTO",
                    "runpod": "#/components/schemas/UpdateRunpodCredentialDTO",
                    "together-ai": "#/components/schemas/UpdateTogetherAICredentialDTO",
                    "twilio": "#/components/schemas/UpdateTwilioCredentialDTO",
                    "vonage": "#/components/schemas/UpdateVonageCredentialDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AnyscaleCredential",
                      "title": "AnyscaleCredential"
                    },
                    {
                      "$ref": "#/components/schemas/AzureOpenAICredential",
                      "title": "AzureOpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/CartesiaCredential",
                      "title": "CartesiaCredential"
                    },
                    {
                      "$ref": "#/components/schemas/CustomLLMCredential",
                      "title": "CustomLLMCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepgramCredential",
                      "title": "DeepgramCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepInfraCredential",
                      "title": "DeepInfraCredential"
                    },
                    {
                      "$ref": "#/components/schemas/ElevenLabsCredential",
                      "title": "ElevenLabsCredential"
                    },
                    {
                      "$ref": "#/components/schemas/GoHighLevelCredential",
                      "title": "GhlCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateGroqCredentialDTO",
                      "title": "GroqCredential"
                    },
                    {
                      "$ref": "#/components/schemas/LmntCredential",
                      "title": "LmntCredential"
                    },
                    {
                      "$ref": "#/components/schemas/MakeCredential",
                      "title": "MakeCredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenAICredential",
                      "title": "OpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenRouterCredential",
                      "title": "OpenRouterCredential"
                    },
                    {
                      "$ref": "#/components/schemas/PerplexityAICredential",
                      "title": "PerplexityAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/PlayHTCredential",
                      "title": "PlayHTCredential"
                    },
                    {
                      "$ref": "#/components/schemas/RimeAICredential",
                      "title": "RimeAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateAnthropicCredentialDTO",
                      "title": "AnthropicCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateRunpodCredentialDTO",
                      "title": "RunpodCredential"
                    },
                    {
                      "$ref": "#/components/schemas/TogetherAICredential",
                      "title": "TogetherAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioCredential",
                      "title": "TwilioCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateVonageCredentialDTO",
                      "title": "VonageCredential"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "11labs": "#/components/schemas/ElevenLabsCredential",
                      "anthropic": "#/components/schemas/AnthropicCredential",
                      "anyscale": "#/components/schemas/AnyscaleCredential",
                      "azure-openai": "#/components/schemas/AzureOpenAICredential",
                      "cartesia": "#/components/schemas/CartesiaCredential",
                      "custom-llm": "#/components/schemas/CustomLLMCredential",
                      "deepgram": "#/components/schemas/DeepgramCredential",
                      "deepinfra": "#/components/schemas/DeepInfraCredential",
                      "gohighlevel": "#/components/schemas/GoHighLevelCredential",
                      "groq": "#/components/schemas/GroqCredential",
                      "lmnt": "#/components/schemas/LmntCredential",
                      "make": "#/components/schemas/MakeCredential",
                      "openai": "#/components/schemas/OpenAICredential",
                      "openrouter": "#/components/schemas/OpenRouterCredential",
                      "perplexity-ai": "#/components/schemas/PerplexityAICredential",
                      "playht": "#/components/schemas/PlayHTCredential",
                      "rime-ai": "#/components/schemas/RimeAICredential",
                      "runpod": "#/components/schemas/RunpodCredential",
                      "together-ai": "#/components/schemas/TogetherAICredential",
                      "twilio": "#/components/schemas/TwilioCredential",
                      "vonage": "#/components/schemas/VonageCredential"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Credentials"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CredentialController_remove",
        "summary": "Delete Credential",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AnyscaleCredential",
                      "title": "AnyscaleCredential"
                    },
                    {
                      "$ref": "#/components/schemas/AzureOpenAICredential",
                      "title": "AzureOpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/CartesiaCredential",
                      "title": "CartesiaCredential"
                    },
                    {
                      "$ref": "#/components/schemas/CustomLLMCredential",
                      "title": "CustomLLMCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepgramCredential",
                      "title": "DeepgramCredential"
                    },
                    {
                      "$ref": "#/components/schemas/DeepInfraCredential",
                      "title": "DeepInfraCredential"
                    },
                    {
                      "$ref": "#/components/schemas/ElevenLabsCredential",
                      "title": "ElevenLabsCredential"
                    },
                    {
                      "$ref": "#/components/schemas/GoHighLevelCredential",
                      "title": "GhlCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateGroqCredentialDTO",
                      "title": "GroqCredential"
                    },
                    {
                      "$ref": "#/components/schemas/LmntCredential",
                      "title": "LmntCredential"
                    },
                    {
                      "$ref": "#/components/schemas/MakeCredential",
                      "title": "MakeCredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenAICredential",
                      "title": "OpenAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/OpenRouterCredential",
                      "title": "OpenRouterCredential"
                    },
                    {
                      "$ref": "#/components/schemas/PerplexityAICredential",
                      "title": "PerplexityAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/PlayHTCredential",
                      "title": "PlayHTCredential"
                    },
                    {
                      "$ref": "#/components/schemas/RimeAICredential",
                      "title": "RimeAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateAnthropicCredentialDTO",
                      "title": "AnthropicCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateRunpodCredentialDTO",
                      "title": "RunpodCredential"
                    },
                    {
                      "$ref": "#/components/schemas/TogetherAICredential",
                      "title": "TogetherAICredential"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioCredential",
                      "title": "TwilioCredential"
                    },
                    {
                      "$ref": "#/components/schemas/UpdateVonageCredentialDTO",
                      "title": "VonageCredential"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "11labs": "#/components/schemas/ElevenLabsCredential",
                      "anthropic": "#/components/schemas/AnthropicCredential",
                      "anyscale": "#/components/schemas/AnyscaleCredential",
                      "azure-openai": "#/components/schemas/AzureOpenAICredential",
                      "cartesia": "#/components/schemas/CartesiaCredential",
                      "custom-llm": "#/components/schemas/CustomLLMCredential",
                      "deepgram": "#/components/schemas/DeepgramCredential",
                      "deepinfra": "#/components/schemas/DeepInfraCredential",
                      "gohighlevel": "#/components/schemas/GoHighLevelCredential",
                      "groq": "#/components/schemas/GroqCredential",
                      "lmnt": "#/components/schemas/LmntCredential",
                      "make": "#/components/schemas/MakeCredential",
                      "openai": "#/components/schemas/OpenAICredential",
                      "openrouter": "#/components/schemas/OpenRouterCredential",
                      "perplexity-ai": "#/components/schemas/PerplexityAICredential",
                      "playht": "#/components/schemas/PlayHTCredential",
                      "rime-ai": "#/components/schemas/RimeAICredential",
                      "runpod": "#/components/schemas/RunpodCredential",
                      "together-ai": "#/components/schemas/TogetherAICredential",
                      "twilio": "#/components/schemas/TwilioCredential",
                      "vonage": "#/components/schemas/VonageCredential"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Credentials"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/squad": {
      "post": {
        "operationId": "SquadController_create",
        "summary": "Create Squad",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "SquadController_findAll",
        "summary": "List Squads",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Squad"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/squad/{id}": {
      "get": {
        "operationId": "SquadController_findOne",
        "summary": "Get Squad",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "SquadController_update",
        "summary": "Update Squad",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSquadDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SquadController_remove",
        "summary": "Delete Squad",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number/buy": {
      "post": {
        "operationId": "PhoneNumberController_buy",
        "summary": "Buy Phone Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyPhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number/import/twilio": {
      "post": {
        "operationId": "PhoneNumberController_importTwilio",
        "summary": "Import Twilio Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number/import/vonage": {
      "post": {
        "operationId": "PhoneNumberController_importVonage",
        "summary": "Import Vonage Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportVonagePhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number": {
      "post": {
        "operationId": "PhoneNumberController_create",
        "summary": "Create Phone Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PhoneNumberController_findAll",
        "summary": "List Phone Numbers",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number/{id}": {
      "get": {
        "operationId": "PhoneNumberController_findOne",
        "summary": "Get Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "PhoneNumberController_update",
        "summary": "Update Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PhoneNumberController_remove",
        "summary": "Delete Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/metrics": {
      "get": {
        "operationId": "MetricsController_findAll",
        "summary": "List Metrics",
        "parameters": [
          {
            "name": "timezone",
            "required": false,
            "in": "query",
            "example": "PST",
            "description": "Convert date & and time to provided timezone. https://popsql.com/learn-sql/postgresql/how-to-convert-utc-to-local-time-zone-in-postgresql",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rangeStart",
            "required": false,
            "in": "query",
            "description": "This will include calls with a createdAt timestamp greater than or equal to the specified value.\n\nIf not provided, defaults to the org's current period start.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "rangeEnd",
            "required": false,
            "in": "query",
            "description": "This will include calls with a createdAt timestamp less than the specified value.\n\nIf not provided, the default value will be the current timestamp.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metrics"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Metrics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/log": {
      "get": {
        "operationId": "LoggingController_getLogs",
        "summary": "Get Call Logs",
        "parameters": [
          {
            "name": "callId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "This is the page number to return. Defaults to 1.",
            "schema": {
              "minimum": 1,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "This is the sort order for pagination. Defaults to 'ASC'.",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallLogsPaginatedResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tool": {
      "post": {
        "operationId": "ToolController_create",
        "summary": "Create Tool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateMakeToolDTO",
                    "title": "MakeTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateGhlToolDTO",
                    "title": "GhlTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateFunctionToolDTO",
                    "title": "FunctionTool"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "make": "#/components/schemas/CreateMakeToolDTO",
                    "ghl": "#/components/schemas/CreateGhlToolDTO",
                    "function": "#/components/schemas/CreateFunctionToolDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "make": "#/components/schemas/MakeTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ToolController_findAll",
        "summary": "List Tools",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MakeTool",
                        "title": "MakeTool"
                      },
                      {
                        "$ref": "#/components/schemas/GhlTool",
                        "title": "GhlTool"
                      },
                      {
                        "$ref": "#/components/schemas/FunctionTool",
                        "title": "FunctionTool"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "make": "#/components/schemas/MakeTool",
                        "ghl": "#/components/schemas/GhlTool",
                        "function": "#/components/schemas/FunctionTool"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tool/{id}": {
      "get": {
        "operationId": "ToolController_findOne",
        "summary": "Get Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "make": "#/components/schemas/MakeTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ToolController_update",
        "summary": "Update Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateMakeToolDTO",
                    "title": "MakeTool"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateGhlToolDTO",
                    "title": "GhlTool"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateFunctionToolDTO",
                    "title": "FunctionTool"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "make": "#/components/schemas/UpdateMakeToolDTO",
                    "ghl": "#/components/schemas/UpdateGhlToolDTO",
                    "function": "#/components/schemas/UpdateFunctionToolDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "make": "#/components/schemas/MakeTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ToolController_remove",
        "summary": "Delete Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "make": "#/components/schemas/MakeTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/file/upload": {
      "post": {
        "operationId": "FileController_create",
        "summary": "Upload File",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/file": {
      "get": {
        "operationId": "FileController_findAll",
        "summary": "List Files",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/file/{id}": {
      "get": {
        "operationId": "FileController_findOne",
        "summary": "Get File",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "FileController_remove",
        "summary": "Delete File",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Vapi API",
    "description": "API for building voice assistants",
    "version": "1.0",
    "contact": {

    }
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.vapi.ai"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "Bearer",
        "type": "http",
        "description": "Retrieve your API Key from [Dashboard](dashboard.vapi.ai)."
      }
    },
    "schemas": {
      "DeepgramTranscriber": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the transcription provider that will be used.",
            "enum": [
              "deepgram"
            ]
          },
          "model": {
            "description": "This is the Deepgram model that will be used. A list of models can be found here: https://developers.deepgram.com/docs/models-languages-overview",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "nova-2",
                  "nova-2-general",
                  "nova-2-meeting",
                  "nova-2-phonecall",
                  "nova-2-finance",
                  "nova-2-conversationalai",
                  "nova-2-voicemail",
                  "nova-2-video",
                  "nova-2-medical",
                  "nova-2-drivethru",
                  "nova-2-automotive",
                  "nova",
                  "nova-general",
                  "nova-phonecall",
                  "nova-medical",
                  "enhanced",
                  "enhanced-general",
                  "enhanced-meeting",
                  "enhanced-phonecall",
                  "enhanced-finance",
                  "base",
                  "base-general",
                  "base-meeting",
                  "base-phonecall",
                  "base-finance",
                  "base-conversationalai",
                  "base-voicemail",
                  "base-video"
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "language": {
            "type": "string",
            "description": "This is the language that will be set for the transcription. The list of languages Deepgram supports can be found here: https://developers.deepgram.com/docs/models-languages-overview",
            "enum": [
              "bg",
              "ro",
              "cs",
              "da",
              "da-DK",
              "de-CH",
              "nl",
              "en",
              "en-US",
              "en-AU",
              "en-GB",
              "en-NZ",
              "en-IN",
              "nl-BE",
              "fr",
              "fr-CA",
              "de",
              "el",
              "hi",
              "hi-Latn",
              "id",
              "it",
              "ja",
              "ko",
              "ko-KR",
              "no",
              "pl",
              "pt",
              "pt-BR",
              "ru",
              "es",
              "es-419",
              "sv",
              "sv-SE",
              "tr",
              "uk",
              "ja",
              "zh",
              "zh-CN",
              "zh-TW"
            ]
          },
          "smartFormat": {
            "type": "boolean",
            "description": "This will be use smart format option provided by Deepgram. It's default disabled because it can sometimes format numbers as times sometimes but it's getting better.",
            "example": false
          },
          "keywords": {
            "description": "These keywords are passed to the transcription model to help it pick up use-case specific words. Anything that may not be a common word, like your company name, should be added here.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "/^\\p{L}[\\p{L}\\d]*(?::[+-]?\\d+)?$/u"
            }
          }
        },
        "required": [
          "provider"
        ]
      },
      "TalkscriberTranscriber": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the transcription provider that will be used.",
            "enum": [
              "talkscriber"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used for the transcription.",
            "enum": [
              "whisper"
            ]
          },
          "language": {
            "type": "string",
            "description": "This is the language that will be set for the transcription. The list of languages Whisper supports can be found here: https://github.com/openai/whisper/blob/main/whisper/tokenizer.py",
            "enum": [
              "en",
              "zh",
              "de",
              "es",
              "ru",
              "ko",
              "fr",
              "ja",
              "pt",
              "tr",
              "pl",
              "ca",
              "nl",
              "ar",
              "sv",
              "it",
              "id",
              "hi",
              "fi",
              "vi",
              "he",
              "uk",
              "el",
              "ms",
              "cs",
              "ro",
              "da",
              "hu",
              "ta",
              "no",
              "th",
              "ur",
              "hr",
              "bg",
              "lt",
              "la",
              "mi",
              "ml",
              "cy",
              "sk",
              "te",
              "fa",
              "lv",
              "bn",
              "sr",
              "az",
              "sl",
              "kn",
              "et",
              "mk",
              "br",
              "eu",
              "is",
              "hy",
              "ne",
              "mn",
              "bs",
              "kk",
              "sq",
              "sw",
              "gl",
              "mr",
              "pa",
              "si",
              "km",
              "sn",
              "yo",
              "so",
              "af",
              "oc",
              "ka",
              "be",
              "tg",
              "sd",
              "gu",
              "am",
              "yi",
              "lo",
              "uz",
              "fo",
              "ht",
              "ps",
              "tk",
              "nn",
              "mt",
              "sa",
              "lb",
              "my",
              "bo",
              "tl",
              "mg",
              "as",
              "tt",
              "haw",
              "ln",
              "ha",
              "ba",
              "jw",
              "su",
              "yue"
            ]
          }
        },
        "required": [
          "provider"
        ]
      },
      "Condition": {
        "type": "object",
        "properties": {
          "param": {
            "type": "string",
            "description": "This is the name of the parameter that you want to check."
          },
          "value": {
            "type": "string",
            "description": "This is the value you want to compare against the parameter."
          },
          "operator": {
            "type": "string",
            "description": "This is the operator you want to use to compare the parameter and value.",
            "enum": [
              "eq",
              "neq",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          }
        },
        "required": [
          "param",
          "value",
          "operator"
        ]
      },
      "ToolMessageStart": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "request-start"
            ],
            "description": "This message is triggered when the tool call starts.\n\nThis message is never triggered for async tools.\n\nIf this message is not provided, one of the default filler messages \"Hold on a sec\", \"One moment\", \"Just a sec\", \"Give me a moment\" or \"This'll just take a sec\" will be used."
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "ToolMessageComplete": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call is complete.\n\nThis message is triggered immediately without waiting for your server to respond for async tool calls.\n\nIf this message is not provided, the model will be requested to respond.\n\nIf this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.",
            "enum": [
              "request-complete"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is optional and defaults to \"assistant\".\n\nWhen role=assistant, `content` is said out loud.\n\nWhen role=system, `content` is passed to the model in a system message. Example:\n    system: default one\n    assistant:\n    user:\n    assistant:\n    user:\n    assistant:\n    user:\n    assistant: tool called\n    tool: your server response\n    \u003C--- system prompt as hint\n    ---\u003E model generates response which is spoken\nThis is useful when you want to provide a hint to the model about what to say next.",
            "enum": [
              "assistant",
              "system"
            ]
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "ToolMessageFailed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call fails.\n\nThis message is never triggered for async tool calls.\n\nIf this message is not provided, the model will be requested to respond.\n\nIf this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.",
            "enum": [
              "request-failed"
            ]
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "ToolMessageDelayed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call is delayed.\n\nThere are the two things that can trigger this message:\n1. The user talks with the assistant while your server is processing the request. Default is \"Sorry, a few more seconds.\"\n2. The server doesn't respond within `timingMilliseconds`.\n\nThis message is never triggered for async tool calls.",
            "enum": [
              "request-response-delayed"
            ]
          },
          "timingMilliseconds": {
            "type": "number",
            "minimum": 100,
            "maximum": 20000,
            "example": 1000,
            "description": "The number of milliseconds to wait for the server response before saying this message."
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "JsonSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of output you'd like.\n\n`string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.\n\n`array` and `object` are more interesting and quite powerful. They allow you to define nested structures.\n\nFor `array`, you can define the schema of the items in the array using the `items` property.\n\nFor `object`, you can define the properties of the object using the `properties` property.",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "array",
              "object"
            ]
          },
          "items": {
            "type": "object",
            "description": "This is required if the type is \"array\". This is the schema of the items in the array.\n\nThis is of type JsonSchema. However, Swagger doesn't support circular references."
          },
          "properties": {
            "type": "object",
            "description": "This is required if the type is \"object\". This specifies the properties of the object.\n\nThis is a map of string to JsonSchema. However, Swagger doesn't support circular references."
          },
          "description": {
            "type": "string",
            "description": "This is the description to help the model understand what it needs to output."
          },
          "required": {
            "description": "This is a list of properties that are required.\n\nThis only makes sense if the type is \"object\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenAIFunctionParameters": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.",
            "enum": [
              "object"
            ]
          },
          "properties": {
            "type": "object",
            "description": "This provides a description of the properties required by the function.\nJSON Schema can be used to specify expectations for each property.\nRefer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonSchema"
            }
          },
          "required": {
            "description": "This specifies the properties that are required by the function.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "properties"
        ]
      },
      "OpenAIFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the the name of the function to be called.\n\nMust be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "maxLength": 64,
            "pattern": "/^[a-zA-Z0-9_-]{1,64}$/"
          },
          "description": {
            "type": "string",
            "description": "This is the description of what the function does, used by the AI to choose when and how to call the function.",
            "maxLength": 1000
          },
          "parameters": {
            "description": "These are the parameters the functions accepts, described as a JSON Schema object.\n\nSee the [OpenAI guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format.\n\nOmitting parameters defines a function with an empty parameter list.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunctionParameters"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "Server": {
        "type": "object",
        "properties": {
          "timeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "example": 10,
            "description": "This is the timeout in seconds for the request to your server. Defaults to 10 seconds."
          },
          "url": {
            "type": "string",
            "description": "API endpoint to send requests to."
          },
          "secret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as server."
          }
        },
        "required": [
          "url"
        ]
      },
      "CreateDtmfToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "dtmf"
            ],
            "description": "The type of tool. \"dtmf\" for DTMF tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateEndCallToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "endCall"
            ],
            "description": "The type of tool. \"endCall\" for End Call tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateFunctionToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "GhlToolMetadata": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          }
        }
      },
      "CreateGhlToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "MakeToolMetadata": {
        "type": "object",
        "properties": {
          "scenarioId": {
            "type": "number"
          },
          "triggerHookId": {
            "type": "number"
          }
        }
      },
      "CreateMakeToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "AssistantTransferDestination": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "assistant"
            ]
          },
          "assistantName": {
            "type": "string",
            "description": "This is the assistant to transfer the call to."
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "assistantName"
        ]
      },
      "PhoneNumberTransferDestination": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "phoneNumber"
            ]
          },
          "number": {
            "type": "string",
            "description": "This is the phone number to transfer the call to."
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "number"
        ]
      },
      "SipTransferDestination": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sip"
            ]
          },
          "sipUri": {
            "type": "string",
            "description": "This is the SIP URI to transfer the call to."
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "sipUri"
        ]
      },
      "CreateTransferCallToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "transferCall"
            ]
          },
          "destinations": {
            "type": "array",
            "description": "These are the destinations that the call can be transferred to. If no destinations are provided, server.url will be used to get the transfer destination once the tool is called.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssistantTransferDestination",
                  "title": "AssistantTransferDestination"
                },
                {
                  "$ref": "#/components/schemas/PhoneNumberTransferDestination",
                  "title": "PhoneNumberTransferDestination"
                },
                {
                  "$ref": "#/components/schemas/SipTransferDestination",
                  "title": "SipTransferDestination"
                }
              ]
            }
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenAIMessage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant",
              "function",
              "user",
              "system",
              "tool"
            ]
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "KnowledgeBase": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "canonical"
            ]
          },
          "topK": {
            "type": "number",
            "minimum": 1,
            "maximum": 10
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "provider",
          "fileIds"
        ]
      },
      "AnyscaleModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "AnthropicModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model": {
            "type": "string",
            "description": "This is the Anthropic/Claude models that will be used.",
            "enum": [
              "claude-3-opus-20240229",
              "claude-3-sonnet-20240229",
              "claude-3-haiku-20240307"
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "model",
          "provider"
        ]
      },
      "CustomLLMModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "description": "This is the provider that will be used for the model. Any service, including your own server, that is compatible with the OpenAI API can be used.",
            "enum": [
              "custom-llm"
            ]
          },
          "url": {
            "type": "string",
            "description": "These is the URL we'll use for the OpenAI client's `baseURL`. Ex. https://openrouter.ai/api/v1"
          },
          "urlRequestMetadataEnabled": {
            "type": "boolean",
            "description": "This sets whether the call object is sent in requests to the custom provider. Default is true."
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "url",
          "urlRequestMetadataEnabled",
          "model"
        ]
      },
      "DeepInfraModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "GroqModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b",
            "enum": [
              "mixtral-8x7b-32768",
              "llama3-8b-8192",
              "llama3-70b-8192"
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "model",
          "provider"
        ]
      },
      "OpenAIModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "description": "This is the provider that will be used for the model.",
            "enum": [
              "openai"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the OpenAI model that will be used.",
            "enum": [
              "gpt-4o",
              "gpt-4o-2024-05-13",
              "gpt-4-turbo",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-turbo-preview",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4",
              "gpt-4-0613",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-0125",
              "gpt-3.5-turbo-1106",
              "gpt-3.5-turbo-16k",
              "gpt-3.5-turbo-0613"
            ]
          },
          "fallbackModels": {
            "type": "array",
            "description": "These are the fallback models that will be used if the primary model fails. This shouldn't be specified unless you have a specific reason to do so. Vapi will automatically find the fastest fallbacks that make sense.",
            "enum": [
              "gpt-4o",
              "gpt-4o-2024-05-13",
              "gpt-4-turbo",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-turbo-preview",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4",
              "gpt-4-0613",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-0125",
              "gpt-3.5-turbo-1106",
              "gpt-3.5-turbo-16k",
              "gpt-3.5-turbo-0613"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o",
                "gpt-4o-2024-05-13",
                "gpt-4-turbo",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-turbo-preview",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4",
                "gpt-4-0613",
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-0125",
                "gpt-3.5-turbo-1106",
                "gpt-3.5-turbo-16k",
                "gpt-3.5-turbo-0613"
              ]
            }
          },
          "semanticCachingEnabled": {
            "type": "boolean",
            "example": true
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use gpt-3.5-turbo before switching to the primary model. Default is 0.",
            "minimum": 0
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "OpenRouterModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "PerplexityAIModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "TogetherAIModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text."
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "AzureVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "azure"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "andrew",
                  "brian",
                  "emma"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "Azure Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.5,
            "maximum": 2
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "CartesiaVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "cartesia"
            ]
          },
          "voiceId": {
            "type": "string",
            "description": "This is the provider-specific ID that will be used."
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "DeepgramVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "deepgram"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "asteria",
                  "luna",
                  "stella",
                  "athena",
                  "hera",
                  "orion",
                  "arcas",
                  "perseus",
                  "angus",
                  "orpheus",
                  "helios",
                  "zeus"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "Deepgram Voice ID"
              }
            ]
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "ElevenLabsVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "11labs"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used. Ensure the Voice is present in your 11Labs Voice Library.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "burt",
                  "marissa",
                  "andrea",
                  "sarah",
                  "phillip",
                  "steve",
                  "joseph",
                  "myra",
                  "paula",
                  "ryan",
                  "drew",
                  "paul",
                  "mrb",
                  "matilda",
                  "mark"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "11Labs Voice ID"
              }
            ]
          },
          "stability": {
            "type": "number",
            "description": "Defines the stability for voice settings.",
            "minimum": 0,
            "maximum": 1,
            "example": 0.5
          },
          "similarityBoost": {
            "type": "number",
            "description": "Defines the similarity boost for voice settings.",
            "minimum": 0,
            "maximum": 1,
            "example": 0.75
          },
          "style": {
            "type": "number",
            "description": "Defines the style for voice settings.",
            "minimum": 0,
            "maximum": 1,
            "example": 0
          },
          "useSpeakerBoost": {
            "type": "boolean",
            "description": "Defines the use speaker boost for voice settings.",
            "example": false
          },
          "optimizeStreamingLatency": {
            "type": "number",
            "description": "Defines the optimize streaming latency for voice settings. Defaults to 3.",
            "minimum": 0,
            "maximum": 4,
            "example": 3
          },
          "enableSsmlParsing": {
            "type": "boolean",
            "description": "Defines the use of https://elevenlabs.io/docs/speech-synthesis/prompting#pronunciation. Disabled by default.",
            "example": false
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used. Defaults to 'eleven_multilingual_v2' if transcriber.language is non-English, otherwise 'eleven_turbo_v2_5'.",
            "enum": [
              "eleven_multilingual_v2",
              "eleven_turbo_v2",
              "eleven_turbo_v2_5",
              "eleven_monolingual_v1"
            ],
            "example": "eleven_turbo_v2_5"
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "LMNTVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "lmnt"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "lily",
                  "daniel"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "LMNT Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.25,
            "maximum": 2,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "NeetsVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "neets"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "vits",
                  "vits"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "Neets Voice ID"
              }
            ]
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "OpenAIVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "openai"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "enum": [
              "alloy",
              "echo",
              "fable",
              "onyx",
              "nova",
              "shimmer"
            ],
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "alloy",
                  "echo",
                  "fable",
                  "onyx",
                  "nova",
                  "shimmer"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "OpenAI Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.25,
            "maximum": 4,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "PlayHTVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "playht"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "jennifer",
                  "melissa",
                  "will",
                  "chris",
                  "matt",
                  "jack",
                  "ruby",
                  "davis",
                  "donna",
                  "michael"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "PlayHT Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.1,
            "maximum": 5,
            "example": null
          },
          "temperature": {
            "type": "number",
            "description": "A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.",
            "minimum": 0.1,
            "maximum": 2,
            "example": null
          },
          "emotion": {
            "type": "string",
            "description": "An emotion to be applied to the speech.",
            "enum": [
              "female_happy",
              "female_sad",
              "female_angry",
              "female_fearful",
              "female_disgust",
              "female_surprised",
              "male_happy",
              "male_sad",
              "male_angry",
              "male_fearful",
              "male_disgust",
              "male_surprised"
            ],
            "example": null
          },
          "voiceGuidance": {
            "type": "number",
            "description": "A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.",
            "minimum": 1,
            "maximum": 6,
            "example": null
          },
          "styleGuidance": {
            "type": "number",
            "description": "A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.",
            "minimum": 1,
            "maximum": 30,
            "example": null
          },
          "textGuidance": {
            "type": "number",
            "description": "A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.",
            "minimum": 1,
            "maximum": 2,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "RimeAIVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like \u003Cflush /\u003E will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "array",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "rime-ai"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "marsh",
                  "bayou",
                  "creek",
                  "brook",
                  "flower",
                  "spore",
                  "glacier",
                  "gulch",
                  "alpine",
                  "cove",
                  "lagoon",
                  "tundra",
                  "steppe",
                  "mesa",
                  "grove",
                  "rainforest",
                  "moraine",
                  "wildflower",
                  "peak",
                  "boulder",
                  "abbie",
                  "allison",
                  "ally",
                  "alona",
                  "amber",
                  "ana",
                  "antoine",
                  "armon",
                  "brenda",
                  "brittany",
                  "carol",
                  "colin",
                  "courtney",
                  "elena",
                  "elliot",
                  "eva",
                  "geoff",
                  "gerald",
                  "hank",
                  "helen",
                  "hera",
                  "jen",
                  "joe",
                  "joy",
                  "juan",
                  "kendra",
                  "kendrick",
                  "kenneth",
                  "kevin",
                  "kris",
                  "linda",
                  "madison",
                  "marge",
                  "marina",
                  "marissa",
                  "marta",
                  "maya",
                  "nicholas",
                  "nyles",
                  "phil",
                  "reba",
                  "rex",
                  "rick",
                  "ritu",
                  "rob",
                  "rodney",
                  "rohan",
                  "rosco",
                  "samantha",
                  "sandy",
                  "selena",
                  "seth",
                  "sharon",
                  "stan",
                  "tamra",
                  "tanya",
                  "tibur",
                  "tj",
                  "tyler",
                  "viv",
                  "yadira"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "RimeAI Voice ID"
              }
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used. Defaults to 'v1' when not specified.",
            "enum": [
              "v1",
              "mist"
            ],
            "example": "v1"
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.1,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "TwilioVoicemailDetection": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "voicemailDetectionTypes": {
            "type": "array",
            "description": "These are the AMD messages from Twilio that are considered as voicemail. Default is ['machine_end_beep', 'machine_end_silence'].",
            "enum": [
              "machine_start",
              "human",
              "fax",
              "unknown",
              "machine_end_beep",
              "machine_end_silence",
              "machine_end_other"
            ],
            "example": [
              "machine_end_beep",
              "machine_end_silence"
            ],
            "items": {
              "type": "string",
              "enum": [
                "machine_start",
                "human",
                "fax",
                "unknown",
                "machine_end_beep",
                "machine_end_silence",
                "machine_end_other"
              ]
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "machineDetectionTimeout": {
            "type": "number",
            "minimum": 3,
            "maximum": 59
          },
          "machineDetectionSpeechThreshold": {
            "type": "number",
            "minimum": 1000,
            "maximum": 6000
          },
          "machineDetectionSpeechEndThreshold": {
            "type": "number",
            "minimum": 500,
            "maximum": 5000
          },
          "machineDetectionSilenceTimeout": {
            "type": "number",
            "minimum": 2000,
            "maximum": 10000
          }
        },
        "required": [
          "provider"
        ]
      },
      "AnalysisPlan": {
        "type": "object",
        "properties": {
          "summaryPrompt": {
            "type": "string",
            "maxLength": 2000,
            "description": "This is the prompt that's used to summarize the call. The output is stored in `call.analysis.summary`.\n\nDefault is \"You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences, if applicable.\".\n\nSet to '' or 'off' to disable."
          },
          "summaryRequestTimeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "description": "This is how long the request is tried before giving up. When request times out, `call.analysis.summary` will be empty. Increasing this timeout will delay the end of call report.\n\nDefault is 5 seconds."
          },
          "structuredDataRequestTimeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "description": "This is how long the request is tried before giving up. When request times out, `call.analysis.structuredData` will be empty. Increasing this timeout will delay the end of call report.\n\nDefault is 5 seconds."
          },
          "successEvaluationPrompt": {
            "type": "string",
            "maxLength": 2000,
            "description": "This is the prompt that's used to evaluate if the call was successful. The output is stored in `call.analysis.successEvaluation`.\n\nDefault is \"You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt.\".\n\nSet to '' or 'off' to disable.\n\nYou can use this standalone or in combination with `successEvaluationRubric`. If both are provided, they are concatenated into appropriate instructions."
          },
          "successEvaluationRubric": {
            "type": "string",
            "enum": [
              "NumericScale",
              "DescriptiveScale",
              "Checklist",
              "Matrix",
              "PercentageScale",
              "LikertScale",
              "AutomaticRubric",
              "PassFail"
            ],
            "description": "This enforces the rubric of the evaluation. The output is stored in `call.analysis.successEvaluation`.\n\nOptions include:\n- 'NumericScale': A scale of 1 to 10.\n- 'DescriptiveScale': A scale of Excellent, Good, Fair, Poor.\n- 'Checklist': A checklist of criteria and their status.\n- 'Matrix': A grid that evaluates multiple criteria across different performance levels.\n- 'PercentageScale': A scale of 0% to 100%.\n- 'LikertScale': A scale of Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree.\n- 'AutomaticRubric': Automatically break down evaluation into several criteria, each with its own score.\n- 'PassFail': A simple 'true' if call passed, 'false' if not.\n\nFor 'Checklist' and 'Matrix', provide the criteria in `successEvaluationPrompt`.\n\nDefault is 'PassFail' if `successEvaluationPrompt` is not provided, and null if `successEvaluationPrompt` is provided.\n\nYou can use this standalone or in combination with `successEvaluationPrompt`. If both are provided, they are concatenated into appropriate instructions."
          },
          "successEvaluationRequestTimeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "description": "This is how long the request is tried before giving up. When request times out, `call.analysis.successEvaluation` will be empty. Increasing this timeout will delay the end of call report.\n\nDefault is 5 seconds."
          },
          "structuredDataPrompt": {
            "type": "string",
            "description": "This is the prompt that's used to extract structured data from the call. The output is stored in `call.analysis.structuredData`.\n\nDisabled by default.\n\nYou can use this standalone or in combination with `structuredDataSchema`. If both are provided, they are concatenated into appropriate instructions.",
            "maxLength": 2000
          },
          "structuredDataSchema": {
            "description": "This enforces the schema of the structured data. This output is stored in `call.analysis.structuredData`.\n\nComplete guide on JSON Schema can be found [here](https://ajv.js.org/json-schema.html#json-data-type).\n\nDisabled by default.\n\nYou can use this standalone or in combination with `structuredDataPrompt`. If both are provided, they are concatenated into appropriate instructions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          }
        }
      },
      "ArtifactPlan": {
        "type": "object",
        "properties": {
          "videoRecordingEnabled": {
            "type": "boolean",
            "description": "This determines whether the video is recorded during the call. Default is false. Only relevant for `webCall` type."
          }
        }
      },
      "CreateAssistantDTO": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nSpecify 'assistant-waits-for-user' to have the assistant wait for the user to speak first.",
            "enum": [
              "assistant-speaks-first",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "responseDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds after user speech to wait before the assistant starts speaking. Defaults to 0.4.",
            "minimum": 0,
            "maximum": 5,
            "example": 0.4
          },
          "llmRequestDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after punctuation before sending a request to the LLM. Defaults to 0.1.",
            "minimum": 0,
            "maximum": 3,
            "example": 0.1
          },
          "numWordsToInterruptAssistant": {
            "type": "number",
            "description": "The number of words to wait for before interrupting the assistant. Words like \"stop\", \"actually\", \"no\", etc. will always interrupt immediately regardless of this value. Words like \"okay\", \"yeah\", \"right\" will never interrupt. When set to 0, it will rely solely on the VAD (Voice Activity Detector) and will not wait for any transcription. Defaults to 0.",
            "minimum": 0,
            "maximum": 10,
            "example": 0
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 400
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 35,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is the metadata associated with the call."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          }
        }
      },
      "Assistant": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nSpecify 'assistant-waits-for-user' to have the assistant wait for the user to speak first.",
            "enum": [
              "assistant-speaks-first",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "responseDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds after user speech to wait before the assistant starts speaking. Defaults to 0.4.",
            "minimum": 0,
            "maximum": 5,
            "example": 0.4
          },
          "llmRequestDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after punctuation before sending a request to the LLM. Defaults to 0.1.",
            "minimum": 0,
            "maximum": 3,
            "example": 0.1
          },
          "numWordsToInterruptAssistant": {
            "type": "number",
            "description": "The number of words to wait for before interrupting the assistant. Words like \"stop\", \"actually\", \"no\", etc. will always interrupt immediately regardless of this value. Words like \"okay\", \"yeah\", \"right\" will never interrupt. When set to 0, it will rely solely on the VAD (Voice Activity Detector) and will not wait for any transcription. Defaults to 0.",
            "minimum": 0,
            "maximum": 10,
            "example": 0
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "isServerUrlSecretSet": {
            "type": "object"
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 400
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 35,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is the metadata associated with the call."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the assistant."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this assistant belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "isServerUrlSecretSet",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateAssistantDTO": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nSpecify 'assistant-waits-for-user' to have the assistant wait for the user to speak first.",
            "enum": [
              "assistant-speaks-first",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "responseDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds after user speech to wait before the assistant starts speaking. Defaults to 0.4.",
            "minimum": 0,
            "maximum": 5,
            "example": 0.4
          },
          "llmRequestDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after punctuation before sending a request to the LLM. Defaults to 0.1.",
            "minimum": 0,
            "maximum": 3,
            "example": 0.1
          },
          "numWordsToInterruptAssistant": {
            "type": "number",
            "description": "The number of words to wait for before interrupting the assistant. Words like \"stop\", \"actually\", \"no\", etc. will always interrupt immediately regardless of this value. Words like \"okay\", \"yeah\", \"right\" will never interrupt. When set to 0, it will rely solely on the VAD (Voice Activity Detector) and will not wait for any transcription. Defaults to 0.",
            "minimum": 0,
            "maximum": 10,
            "example": 0
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 400
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 35,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is the metadata associated with the call."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          }
        }
      },
      "AnalysisCostBreakdown": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "number",
            "description": "This is the cost to summarize the call."
          },
          "summaryPromptTokens": {
            "type": "number",
            "description": "This is the number of prompt tokens used to summarize the call."
          },
          "summaryCompletionTokens": {
            "type": "number",
            "description": "This is the number of completion tokens used to summarize the call."
          },
          "structuredData": {
            "type": "number",
            "description": "This is the cost to extract structured data from the call."
          },
          "structuredDataPromptTokens": {
            "type": "number",
            "description": "This is the number of prompt tokens used to extract structured data from the call."
          },
          "structuredDataCompletionTokens": {
            "type": "number",
            "description": "This is the number of completion tokens used to extract structured data from the call."
          },
          "successEvaluation": {
            "type": "number",
            "description": "This is the cost to evaluate if the call was successful."
          },
          "successEvaluationPromptTokens": {
            "type": "number",
            "description": "This is the number of prompt tokens used to evaluate if the call was successful."
          },
          "successEvaluationCompletionTokens": {
            "type": "number",
            "description": "This is the number of completion tokens used to evaluate if the call was successful."
          }
        }
      },
      "CostBreakdown": {
        "type": "object",
        "properties": {
          "transport": {
            "type": "number",
            "description": "This is the cost of the transport provider, like Twilio or Vonage."
          },
          "stt": {
            "type": "number",
            "description": "This is the cost of the speech-to-text service."
          },
          "llm": {
            "type": "number",
            "description": "This is the cost of the language model."
          },
          "tts": {
            "type": "number",
            "description": "This is the cost of the text-to-speech service."
          },
          "vapi": {
            "type": "number",
            "description": "This is the cost of Vapi."
          },
          "total": {
            "type": "number",
            "description": "This is the total cost of the call."
          },
          "llmPromptTokens": {
            "type": "number",
            "description": "This is the LLM prompt tokens used for the call."
          },
          "llmCompletionTokens": {
            "type": "number",
            "description": "This is the LLM completion tokens used for the call."
          },
          "ttsCharacters": {
            "type": "number",
            "description": "This is the TTS characters used for the call."
          },
          "analysisCostBreakdown": {
            "description": "This is the cost of the analysis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisCostBreakdown"
              }
            ]
          }
        }
      },
      "Artifact": {
        "type": "object",
        "properties": {
          "videoRecordingUrl": {
            "type": "string",
            "description": "This is video recording url for the call. Enable by setting `assistant.artifactPlan.videoRecordingEnabled`."
          },
          "videoRecordingStartDelaySeconds": {
            "type": "number",
            "description": "This is video recording start delay in ms. Only available when `assistant.artifactPlan.videoRecordingEnabled` is enabled."
          }
        }
      },
      "Analysis": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "This is the summary of the call. Customize by setting `assistant.analysisPlan.summaryPrompt`."
          },
          "structuredData": {
            "type": "object",
            "description": "This is the structured data extracted from the call. Customize by setting `assistant.analysisPlan.structuredDataPrompt` and/or `assistant.analysisPlan.structuredDataSchema`."
          },
          "successEvaluation": {
            "type": "string",
            "description": "This is the evaluation of the call. Customize by setting `assistant.analysisPlan.successEvaluationPrompt` and/or `assistant.analysisPlan.successEvaluationRubric`."
          }
        }
      },
      "AssistantOverrides": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nSpecify 'assistant-waits-for-user' to have the assistant wait for the user to speak first.",
            "enum": [
              "assistant-speaks-first",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "array",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "responseDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds after user speech to wait before the assistant starts speaking. Defaults to 0.4.",
            "minimum": 0,
            "maximum": 5,
            "example": 0.4
          },
          "llmRequestDelaySeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after punctuation before sending a request to the LLM. Defaults to 0.1.",
            "minimum": 0,
            "maximum": 3,
            "example": 0.1
          },
          "numWordsToInterruptAssistant": {
            "type": "number",
            "description": "The number of words to wait for before interrupting the assistant. Words like \"stop\", \"actually\", \"no\", etc. will always interrupt immediately regardless of this value. Words like \"okay\", \"yeah\", \"right\" will never interrupt. When set to 0, it will rely solely on the VAD (Voice Activity Detector) and will not wait for any transcription. Defaults to 0.",
            "minimum": 0,
            "maximum": 10,
            "example": 0
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.",
            "example": false
          },
          "variableValues": {
            "type": "object",
            "description": "These are template variables that will be replaced in the assistant messages and prompts."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 400
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 35,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is the metadata associated with the call."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          }
        }
      },
      "SquadMemberDTO": {
        "type": "object",
        "properties": {
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "Overrides for a single assistant's settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "assistantDestinations": {
            "description": "These are the others assistants that this assistant can transfer to.\nThese destinations are in addition to destinations that already exist in the assistant's TransferCall tool.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssistantTransferDestination"
            }
          }
        }
      },
      "CreateSquadDTO": {
        "type": "object",
        "properties": {
          "members": {
            "description": "The list of assistant members in the squad. By default, the call will start\nwith the first assistant supplied in the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SquadMemberDTO"
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "ImportTwilioPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "twilioPhoneNumber": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Twilio."
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "This is your Twilio Account SID that will be used to handle this phone number."
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "This is the Twilio Auth Token that will be used to handle this phone number."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "twilioPhoneNumber",
          "twilioAccountSid",
          "twilioAuthToken"
        ]
      },
      "CreateCustomerDTO": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "This is the number of the customer."
          },
          "sipUri": {
            "type": "string",
            "description": "This is the SIP URI of the customer."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the customer. This is just for your own reference.",
            "maxLength": 40
          },
          "extension": {
            "type": "string",
            "description": "This is the extension that will be dialed after the call is answered.",
            "maxLength": 30
          }
        }
      },
      "Call": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of call.",
            "enum": [
              "inboundPhoneCall",
              "outboundPhoneCall",
              "webCall"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that were spoken during the call.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "phoneCallProvider": {
            "type": "string",
            "description": "This is the provider of the call.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "enum": [
              "twilio",
              "vonage",
              "vapi"
            ]
          },
          "phoneCallTransport": {
            "type": "string",
            "description": "This is the transport of the phone call.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "enum": [
              "sip",
              "pstn"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the call.",
            "enum": [
              "queued",
              "ringing",
              "in-progress",
              "forwarding",
              "ended"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the explanation for how the call ended.",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-extra-function-failed",
              "pipeline-error-first-message-failed",
              "pipeline-error-function-filler-failed",
              "pipeline-error-function-failed",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "server-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "incoming-client-message-say-ended-call",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-blocked-free-plan",
              "pipeline-error-eleven-labs-blocked-concurrent-requests",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the call."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this call belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was last updated."
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was started."
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was ended."
          },
          "cost": {
            "type": "number",
            "description": "This is the cost of the call in USD."
          },
          "costBreakdown": {
            "description": "This is the cost of the call in USD.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CostBreakdown"
              }
            ]
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call."
          },
          "recordingUrl": {
            "type": "string",
            "description": "This is the URL of the recording of the call."
          },
          "stereoRecordingUrl": {
            "type": "string",
            "description": "This is the URL of the recording of the call in two channels."
          },
          "artifact": {
            "description": "This stores artifacts of the call. Customize what artifacts are created by configuring `assistant.artifactPlan`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Artifact"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "analysis": {
            "description": "This is the analysis of the call. Customize the analysis by configuring `assistant.analysisPlan`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Analysis"
              }
            ]
          },
          "phoneCallProviderId": {
            "type": "string",
            "description": "The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "forwardedPhoneNumber": {
            "type": "string",
            "description": "This is the phone number that the call was forwarded to."
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            ]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCustomerDTO"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "itemsPerPage": {
            "type": "number"
          },
          "totalItems": {
            "type": "number"
          },
          "currentPage": {
            "type": "number"
          }
        },
        "required": [
          "itemsPerPage",
          "totalItems",
          "currentPage"
        ]
      },
      "CallPaginatedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Call"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "results",
          "metadata"
        ]
      },
      "CreateOutboundCallDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            ]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCustomerDTO"
              }
            ]
          }
        }
      },
      "CreateWebCallDTO": {
        "type": "object",
        "properties": {
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          }
        }
      },
      "UpdateCallDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          }
        }
      },
      "Squad": {
        "type": "object",
        "properties": {
          "members": {
            "description": "The list of assistant members in the squad. By default, the call will start\nwith the first assistant supplied in the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SquadMemberDTO"
            }
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the squad."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this squad belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the squad was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the squad was last updated."
          }
        },
        "required": [
          "members",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateSquadDTO": {
        "type": "object",
        "properties": {
          "members": {
            "description": "The list of assistant members in the squad. By default, the call will start\nwith the first assistant supplied in the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SquadMemberDTO"
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "AnyscaleCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnthropicCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "AzureOpenAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "azure-openai"
            ]
          },
          "region": {
            "type": "string",
            "enum": [
              "australia",
              "canada",
              "eastus2",
              "eastus",
              "france",
              "india",
              "japan",
              "northcentralus",
              "norway",
              "southcentralus",
              "sweden",
              "switzerland",
              "uk",
              "westus",
              "westus3"
            ]
          },
          "models": {
            "type": "array",
            "enum": [
              "gpt-4o-2024-05-13",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4-0613",
              "gpt-35-turbo-0125",
              "gpt-35-turbo-1106"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-2024-05-13",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4-0613",
                "gpt-35-turbo-0125",
                "gpt-35-turbo-1106"
              ]
            }
          },
          "openAIKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "openAIEndpoint": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "region",
          "models",
          "openAIKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "openAIEndpoint"
        ]
      },
      "CartesiaCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "cartesia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "CustomLLMCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "custom-llm"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeepgramCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepgram"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeepInfraCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ElevenLabsCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "11labs"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "GoHighLevelCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gohighlevel"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "GroqCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "LmntCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "lmnt"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "MakeCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "make"
            ]
          },
          "teamId": {
            "type": "string",
            "description": "Team ID"
          },
          "region": {
            "type": "string",
            "description": "Region of your application. For example: eu1, eu2, us1, us2"
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "teamId",
          "region",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenRouterCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PerplexityAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PlayHTCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "playht"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "userId"
        ]
      },
      "RimeAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "rime-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "RunpodCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "runpod"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "S3Credential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "Credential provider. Only allowed value is s3"
          },
          "awsAccessKeyId": {
            "type": "string",
            "description": "AWS access key ID."
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "AWS access key secret. This is not returned in the API."
          },
          "region": {
            "type": "string",
            "description": "AWS region in which the S3 bucket is located."
          },
          "s3BucketName": {
            "type": "string",
            "description": "AWS S3 bucket name."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "awsAccessKeyId",
          "awsSecretAccessKey",
          "region",
          "s3BucketName",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "TogetherAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "TwilioCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "authToken": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "accountSid": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "authToken",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "accountSid"
        ]
      },
      "VonageCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "vonage"
            ]
          },
          "apiSecret": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "vonageApplicationId": {
            "type": "string",
            "description": "This is the Vonage Application ID for the credential.\n\nOnly relevant for Vonage credentials."
          },
          "vonageApplicationPrivateKey": {
            "type": "string",
            "description": "This is the Vonage Application Private Key for the credential.\n\nOnly relevant for Vonage credentials."
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiSecret",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "vonageApplicationId",
          "vonageApplicationPrivateKey",
          "apiKey"
        ]
      },
      "CreateAnyscaleCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateAnthropicCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateAzureOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "azure-openai"
            ]
          },
          "region": {
            "type": "string",
            "enum": [
              "australia",
              "canada",
              "eastus2",
              "eastus",
              "france",
              "india",
              "japan",
              "northcentralus",
              "norway",
              "southcentralus",
              "sweden",
              "switzerland",
              "uk",
              "westus",
              "westus3"
            ]
          },
          "models": {
            "type": "array",
            "enum": [
              "gpt-4o-2024-05-13",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4-0613",
              "gpt-35-turbo-0125",
              "gpt-35-turbo-1106"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-2024-05-13",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4-0613",
                "gpt-35-turbo-0125",
                "gpt-35-turbo-1106"
              ]
            }
          },
          "openAIKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "openAIEndpoint": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "region",
          "models",
          "openAIKey",
          "openAIEndpoint"
        ]
      },
      "CreateCartesiaCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "cartesia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateCustomLLMCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "custom-llm"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateDeepgramCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepgram"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateDeepInfraCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateElevenLabsCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "11labs"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateGoHighLevelCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gohighlevel"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateGroqCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateLmntCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "lmnt"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateMakeCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "make"
            ]
          },
          "teamId": {
            "type": "string",
            "description": "Team ID"
          },
          "region": {
            "type": "string",
            "description": "Region of your application. For example: eu1, eu2, us1, us2"
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "teamId",
          "region",
          "apiKey"
        ]
      },
      "CreateOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateOpenRouterCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreatePerplexityAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreatePlayHTCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "playht"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiKey",
          "userId"
        ]
      },
      "CreateRimeAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "rime-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateRunpodCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "runpod"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateS3CredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "Credential provider. Only allowed value is s3"
          },
          "awsAccessKeyId": {
            "type": "string",
            "description": "AWS access key ID."
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "AWS access key secret. This is not returned in the API."
          },
          "region": {
            "type": "string",
            "description": "AWS region in which the S3 bucket is located."
          },
          "s3BucketName": {
            "type": "string",
            "description": "AWS S3 bucket name."
          }
        },
        "required": [
          "provider",
          "awsAccessKeyId",
          "awsSecretAccessKey",
          "region",
          "s3BucketName"
        ]
      },
      "CreateTogetherAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateTwilioCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "authToken": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "accountSid": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "authToken",
          "accountSid"
        ]
      },
      "CreateVonageCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "vonage"
            ]
          },
          "apiSecret": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiSecret",
          "apiKey"
        ]
      },
      "UpdateAnyscaleCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateAnthropicCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateAzureOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "azure-openai"
            ]
          },
          "region": {
            "type": "string",
            "enum": [
              "australia",
              "canada",
              "eastus2",
              "eastus",
              "france",
              "india",
              "japan",
              "northcentralus",
              "norway",
              "southcentralus",
              "sweden",
              "switzerland",
              "uk",
              "westus",
              "westus3"
            ]
          },
          "models": {
            "type": "array",
            "enum": [
              "gpt-4o-2024-05-13",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4-0613",
              "gpt-35-turbo-0125",
              "gpt-35-turbo-1106"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-2024-05-13",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4-0613",
                "gpt-35-turbo-0125",
                "gpt-35-turbo-1106"
              ]
            }
          },
          "openAIKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "openAIEndpoint": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "region",
          "models",
          "openAIKey",
          "openAIEndpoint"
        ]
      },
      "UpdateCartesiaCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "cartesia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateCustomLLMCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "custom-llm"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateDeepInfraCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateDeepgramCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepgram"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateElevenLabsCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "11labs"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateGoHighLevelCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gohighlevel"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateGroqCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateLmntCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "lmnt"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateMakeCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "make"
            ]
          },
          "teamId": {
            "type": "string",
            "description": "Team ID"
          },
          "region": {
            "type": "string",
            "description": "Region of your application. For example: eu1, eu2, us1, us2"
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "teamId",
          "region",
          "apiKey"
        ]
      },
      "UpdateOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateOpenRouterCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdatePerplexityAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdatePlayHTCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "playht"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiKey",
          "userId"
        ]
      },
      "UpdateRimeAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "rime-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateRunpodCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "runpod"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateS3CredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "Credential provider. Only allowed value is s3"
          },
          "awsAccessKeyId": {
            "type": "string",
            "description": "AWS access key ID."
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "AWS access key secret. This is not returned in the API."
          },
          "region": {
            "type": "string",
            "description": "AWS region in which the S3 bucket is located."
          },
          "s3BucketName": {
            "type": "string",
            "description": "AWS S3 bucket name."
          }
        },
        "required": [
          "provider",
          "awsAccessKeyId",
          "awsSecretAccessKey",
          "region",
          "s3BucketName"
        ]
      },
      "UpdateTogetherAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateTwilioCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "authToken": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "accountSid": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "authToken",
          "accountSid"
        ]
      },
      "UpdateVonageCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "vonage"
            ]
          },
          "apiSecret": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiSecret",
          "apiKey"
        ]
      },
      "CreateOrgDTO": {
        "type": "object",
        "properties": {
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.\nWhen HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.\nThis is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "This is the name of the org. This is just for your own reference.",
            "maxLength": 40
          },
          "billingLimit": {
            "type": "number",
            "description": "This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.",
            "minimum": 0,
            "maximum": 1000
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret."
          },
          "concurrencyLimit": {
            "type": "number",
            "description": "This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "Org": {
        "type": "object",
        "properties": {
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.\nWhen HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.\nThis is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.",
            "example": false
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the org."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the org was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the org was last updated."
          },
          "stripeCustomerId": {
            "type": "string",
            "description": "This is the Stripe customer for the org."
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "This is the subscription for the org."
          },
          "stripeSubscriptionItemId": {
            "type": "string",
            "description": "This is the subscription's subscription item."
          },
          "stripeSubscriptionCurrentPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "This is the subscription's current period start."
          },
          "stripeSubscriptionStatus": {
            "type": "string",
            "description": "This is the subscription's status."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the org. This is just for your own reference.",
            "maxLength": 40
          },
          "billingLimit": {
            "type": "number",
            "description": "This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.",
            "minimum": 0,
            "maximum": 1000
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret."
          },
          "concurrencyLimit": {
            "type": "number",
            "description": "This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.",
            "minimum": 1,
            "maximum": 10
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateOrgDTO": {
        "type": "object",
        "properties": {
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.\nWhen HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.\nThis is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "This is the name of the org. This is just for your own reference.",
            "maxLength": 40
          },
          "billingLimit": {
            "type": "number",
            "description": "This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.",
            "minimum": 0,
            "maximum": 1000
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret."
          },
          "concurrencyLimit": {
            "type": "number",
            "description": "This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the profile or user."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the profile was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the profile was last updated."
          },
          "email": {
            "type": "string",
            "description": "This is the email of the user that is associated with the profile."
          },
          "fullName": {
            "type": "string",
            "description": "This is the full name of the user that is associated with the profile."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "email"
        ]
      },
      "InviteUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "BuyPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "This is the area code of the phone number to purchase.",
            "minLength": 3,
            "maxLength": 3
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "areaCode"
        ]
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the provider of the phone number.",
            "enum": [
              "twilio",
              "vonage",
              "vapi"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the phone number."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this phone number belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was last updated."
          },
          "number": {
            "type": "string",
            "description": "These are the digits of the phone number for PSTN calls.\n\nThis is not set for SIP numbers. `sipUri` is used instead."
          },
          "sipUri": {
            "type": "string",
            "description": "This is SIP URI of the phone number for SIP calls.\n\nThis is not set for PSTN numbers. `number` is used instead."
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ImportVonagePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "vonagePhoneNumber": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Vonage."
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up.\n\nYou can add the Vonage Credential in the Provider Credentials page on the dashboard to get the credentialId."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "vonagePhoneNumber",
          "credentialId"
        ]
      },
      "CreatePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the provider of the phone number.",
            "enum": [
              "vapi"
            ]
          },
          "sipUri": {
            "type": "string",
            "description": "This is SIP URI of the phone number for SIP calls.\n\nTo add PSTN numbers, use `POST /phone/import/twilio`, `POST /phone/import/vonage` or `POST /phone/buy`."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "provider",
          "sipUri"
        ]
      },
      "UpdatePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: function.serverUrl \u003E assistant.serverUrl \u003E phoneNumber.serverUrl \u003E org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        }
      },
      "Metrics": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "rangeStart": {
            "type": "string"
          },
          "rangeEnd": {
            "type": "string"
          },
          "bill": {
            "type": "number"
          },
          "billWithinBillingLimit": {
            "type": "boolean"
          },
          "billDailyBreakdown": {
            "type": "object"
          },
          "callActive": {
            "type": "string"
          },
          "callActiveWithinConcurrencyLimit": {
            "type": "boolean"
          },
          "callMinutes": {
            "type": "string"
          },
          "callMinutesDailyBreakdown": {
            "type": "object"
          },
          "callMinutesAverage": {
            "type": "string"
          },
          "callMinutesAverageDailyBreakdown": {
            "type": "object"
          },
          "callCount": {
            "type": "string"
          },
          "callCountDailyBreakdown": {
            "type": "object"
          }
        },
        "required": [
          "orgId",
          "rangeStart",
          "rangeEnd",
          "bill",
          "billWithinBillingLimit",
          "billDailyBreakdown",
          "callActive",
          "callActiveWithinConcurrencyLimit",
          "callMinutes",
          "callMinutesDailyBreakdown",
          "callMinutesAverage",
          "callMinutesAverageDailyBreakdown",
          "callCount",
          "callCountDailyBreakdown"
        ]
      },
      "VoiceLibrary": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "object",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "11labs",
              "azure",
              "cartesia",
              "deepgram",
              "lmnt",
              "neets",
              "openai",
              "playht",
              "rime-ai"
            ]
          },
          "providerId": {
            "type": "string",
            "description": "The ID of the voice provided by the provider."
          },
          "slug": {
            "type": "string",
            "description": "The unique slug of the voice."
          },
          "name": {
            "type": "string",
            "description": "The name of the voice."
          },
          "language": {
            "type": "string",
            "description": "The language of the voice."
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the voice."
          },
          "model": {
            "type": "string",
            "description": "The model of the voice."
          },
          "supportedModels": {
            "type": "string",
            "description": "The supported models of the voice."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the voice.",
            "enum": [
              "male",
              "female"
            ]
          },
          "accent": {
            "type": "string",
            "description": "The accent of the voice."
          },
          "previewUrl": {
            "type": "string",
            "description": "The preview URL of the voice."
          },
          "description": {
            "type": "string",
            "description": "The description of the voice."
          },
          "credentialId": {
            "type": "string",
            "description": "The credential ID of the voice."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "The deletion status of the voice."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the voice library."
          },
          "orgId": {
            "type": "string",
            "description": "The unique identifier for the organization that this voice library belongs to."
          },
          "isPublic": {
            "type": "boolean",
            "description": "The Public voice is shared accross all the organizations."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the voice library was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the voice library was last updated."
          }
        },
        "required": [
          "isDeleted",
          "id",
          "orgId",
          "isPublic",
          "createdAt",
          "updatedAt"
        ]
      },
      "SyncVoiceLibraryDTO": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "description": "List of providers you want to sync.",
            "enum": [
              "11labs",
              "azure",
              "cartesia",
              "deepgram",
              "lmnt",
              "neets",
              "openai",
              "playht",
              "rime-ai"
            ],
            "items": {
              "type": "string",
              "enum": [
                "11labs",
                "azure",
                "cartesia",
                "deepgram",
                "lmnt",
                "neets",
                "openai",
                "playht",
                "rime-ai"
              ]
            }
          }
        }
      },
      "CallLogPrivileged": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "string",
            "description": "This is the unique identifier for the call."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this call log belongs to."
          },
          "log": {
            "type": "string",
            "description": "This is the log message associated with the call."
          },
          "level": {
            "type": "string",
            "description": "This is the level of the log message.",
            "enum": [
              "INFO",
              "LOG",
              "WARN",
              "ERROR",
              "CHECKPOINT"
            ]
          },
          "time": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the log was created."
          }
        },
        "required": [
          "callId",
          "orgId",
          "log",
          "level",
          "time"
        ]
      },
      "CallLogsPaginatedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallLogPrivileged"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "results",
          "metadata"
        ]
      },
      "MakeTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the tool library."
          },
          "orgId": {
            "type": "string",
            "description": "The unique identifier for the organization that this tool library belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the tool library was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the tool library was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "metadata"
        ]
      },
      "GhlTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the tool library."
          },
          "orgId": {
            "type": "string",
            "description": "The unique identifier for the organization that this tool library belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the tool library was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the tool library was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "metadata"
        ]
      },
      "FunctionTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the tool library."
          },
          "orgId": {
            "type": "string",
            "description": "The unique identifier for the organization that this tool library belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the tool library was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the tool library was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateMakeToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "UpdateGhlToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "UpdateFunctionToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "VoiceLibraryVoiceResponse": {
        "type": "object",
        "properties": {
          "voiceId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "publicOwnerId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "age": {
            "type": "object"
          },
          "accent": {
            "type": "string"
          }
        },
        "required": [
          "voiceId",
          "name"
        ]
      },
      "AddVoiceToProviderDTO": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "This is the owner_id of your shared voice which you want to add to your provider Account from Provider Voice Library"
          },
          "voiceId": {
            "type": "string",
            "description": "This is the voice_id of the shared voice which you want to add to your provider Account from Provider Voice Library"
          },
          "name": {
            "type": "string",
            "description": "This is the new name of the voice which you want to have once you have added voice to your provider Account from Provider Voice Library"
          }
        },
        "required": [
          "ownerId",
          "voiceId",
          "name"
        ]
      },
      "CreateFileDTO": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "file"
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "file"
            ]
          },
          "status": {
            "enum": [
              "indexed",
              "not_indexed"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "This is the name of the file. This is just for your own reference.",
            "maxLength": 40
          },
          "originalName": {
            "type": "string"
          },
          "bytes": {
            "type": "number"
          },
          "purpose": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the file."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this file belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the file was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the file was last updated."
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ConversationUpdateMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"conversation-update\" is sent when an update is committed to the conversation history.",
            "enum": [
              "conversation-update"
            ]
          },
          "messagesOpenAIFormatted": {
            "description": "This is the most up-to-date conversation history at the time the message is sent.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          }
        },
        "required": [
          "type",
          "messagesOpenAIFormatted"
        ]
      },
      "FunctionCallMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the function call in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content for the function call."
          },
          "name": {
            "type": "string",
            "description": "The name of the function being called."
          },
          "args": {
            "type": "string",
            "description": "The arguments for the function call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "message",
          "name",
          "args",
          "time",
          "secondsFromStart"
        ]
      },
      "FunctionCallResultMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"function-call-result\" is sent to forward the result of a function call to the client.",
            "deprecated": true,
            "enum": [
              "function-call-result"
            ]
          },
          "functionCallResult": {
            "type": "object",
            "description": "This is the result of the function call."
          }
        },
        "required": [
          "type",
          "functionCallResult"
        ]
      },
      "HangMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"hang\" is sent when the assistant is hanging due to a delay. The delay can be caused by many factors, such as:\n- the model is too slow to respond\n- the voice is too slow to respond\n- the tool call is still waiting for a response from your server\n- etc.",
            "enum": [
              "hang"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "MetadataMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"metadata\" is sent to forward metadata to the client.",
            "enum": [
              "metadata"
            ]
          },
          "metadata": {
            "type": "string",
            "description": "This is the metadata content"
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "ModelOutputMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"model-output\" is sent as the model outputs tokens.",
            "enum": [
              "model-output"
            ]
          },
          "output": {
            "type": "string",
            "description": "This is the output of the model."
          }
        },
        "required": [
          "type",
          "output"
        ]
      },
      "SpeechUpdateMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"speech-update\" is sent whenever assistant or user start or stop speaking.",
            "enum": [
              "speech-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the speech update.",
            "enum": [
              "started",
              "stopped"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is the role which the speech update is for.",
            "enum": [
              "assistant",
              "user"
            ]
          }
        },
        "required": [
          "type",
          "status",
          "role"
        ]
      },
      "UserMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the user in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the user."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "endTime": {
            "type": "number",
            "description": "The timestamp when the message ended."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          },
          "duration": {
            "type": "number",
            "description": "The duration of the message in seconds."
          }
        },
        "required": [
          "role",
          "message",
          "time",
          "endTime",
          "secondsFromStart"
        ]
      },
      "SystemMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the system in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the system."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "message",
          "time",
          "secondsFromStart"
        ]
      },
      "BotMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the bot in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the bot."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "endTime": {
            "type": "number",
            "description": "The timestamp when the message ended."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          },
          "source": {
            "type": "string",
            "description": "The source of the message."
          }
        },
        "required": [
          "role",
          "message",
          "time",
          "endTime",
          "secondsFromStart"
        ]
      },
      "ToolCallMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the tool call in the conversation."
          },
          "toolCalls": {
            "description": "The list of tool calls made during the conversation.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "message": {
            "type": "string",
            "description": "The message content for the tool call."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "toolCalls",
          "message",
          "time",
          "secondsFromStart"
        ]
      },
      "ToolCallResultMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the tool call result in the conversation."
          },
          "toolCallId": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool that returned the result."
          },
          "result": {
            "type": "string",
            "description": "The result of the tool call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "toolCallId",
          "name",
          "result",
          "time",
          "secondsFromStart"
        ]
      },
      "FunctionResultMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the function result in the conversation."
          },
          "name": {
            "type": "string",
            "description": "The name of the function that returned the result."
          },
          "result": {
            "type": "string",
            "description": "The result of the function call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "name",
          "result",
          "time",
          "secondsFromStart"
        ]
      },
      "StatusUpdateMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"status-update\" is sent whenever the `call.status` changes.",
            "enum": [
              "status-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the call.",
            "enum": [
              "queued",
              "ringing",
              "in-progress",
              "forwarding",
              "ended"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the reason the call ended. This is only sent if the status is \"ended\".",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-extra-function-failed",
              "pipeline-error-first-message-failed",
              "pipeline-error-function-filler-failed",
              "pipeline-error-function-failed",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "server-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "incoming-client-message-say-ended-call",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-blocked-free-plan",
              "pipeline-error-eleven-labs-blocked-concurrent-requests",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the conversation messages of the call. This is only sent if the status is \"forwarding\".",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "messagesOpenAIFormatted": {
            "description": "These are the conversation messages of the call. This is only sent if the status is \"forwarding\".",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call. This is only sent if the status is \"forwarding\"."
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is number call is being forwarded to. This is only sent if the status is \"forwarding\"."
          },
          "inboundPhoneCallDebuggingArtifacts": {
            "type": "object",
            "description": "This is the inbound phone call debugging artifacts. This is only sent if the status is \"ended\" and there was an error accepting the inbound phone call.\n\nThis will include any errors related to the \"assistant-request\" if one was made."
          }
        },
        "required": [
          "type",
          "status"
        ]
      },
      "TranscriptMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transcript\" is sent as transcriber outputs partial or final transcript.",
            "enum": [
              "transcript"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is the role for which the transcript is for.",
            "enum": [
              "assistant",
              "user"
            ]
          },
          "transcriptType": {
            "type": "string",
            "description": "This is the type of the transcript.",
            "enum": [
              "partial",
              "final"
            ]
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript content."
          }
        },
        "required": [
          "type",
          "role",
          "transcriptType",
          "transcript"
        ]
      },
      "ToolCallFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the function the model called."
          },
          "arguments": {
            "type": "object",
            "description": "These are the arguments that the function was called with."
          }
        },
        "required": [
          "name",
          "arguments"
        ]
      },
      "ToolCall": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of tool the model called.",
            "enum": [
              "function"
            ]
          },
          "function": {
            "description": "This is the function the model called.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolCallFunction"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool call."
          }
        },
        "required": [
          "type",
          "function",
          "id"
        ]
      },
      "FunctionToolWithToolCall": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "toolCall": {
            "$ref": "#/components/schemas/ToolCall"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "toolCall"
        ]
      },
      "GhlToolWithToolCall": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "toolCall": {
            "$ref": "#/components/schemas/ToolCall"
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "toolCall",
          "metadata"
        ]
      },
      "MakeToolWithToolCall": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "toolCall": {
            "$ref": "#/components/schemas/ToolCall"
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, this is a custom function definition.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "toolCall",
          "metadata"
        ]
      },
      "ToolCallsMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"tool-calls\" is sent to call a tool.",
            "enum": [
              "tool-calls"
            ]
          },
          "toolWithToolCallList": {
            "type": "array",
            "description": "This is the list of tools calls that the model is requesting along with the original tool configuration.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FunctionToolWithToolCall",
                  "title": "FunctionToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/GhlToolWithToolCall",
                  "title": "GhlToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/MakeToolWithToolCall",
                  "title": "MakeToolWithToolCall"
                }
              ]
            }
          },
          "toolCallList": {
            "description": "This is the list of tool calls that the model is requesting.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        },
        "required": [
          "toolWithToolCallList",
          "toolCallList"
        ]
      },
      "ToolCallsResultMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"tool-calls-result\" is sent to forward the result of a tool call to the client.",
            "enum": [
              "tool-calls-result"
            ]
          },
          "toolCallResult": {
            "type": "object",
            "description": "This is the result of the tool call."
          }
        },
        "required": [
          "type",
          "toolCallResult"
        ]
      },
      "UserInterruptedMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"user-interrupted\" is sent when the user interrupts the assistant.",
            "enum": [
              "user-interrupted"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "VoiceInputMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"voice-input\" is sent when a generation is requested from voice provider.",
            "enum": [
              "voice-input"
            ]
          },
          "input": {
            "type": "string",
            "description": "This is the voice input content"
          }
        },
        "required": [
          "type",
          "input"
        ]
      },
      "ClientMessage": {
        "type": "object",
        "properties": {
          "message": {
            "description": "These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConversationUpdateMessage"
              },
              {
                "$ref": "#/components/schemas/FunctionCallMessage"
              },
              {
                "$ref": "#/components/schemas/FunctionCallResultMessage"
              },
              {
                "$ref": "#/components/schemas/HangMessage"
              },
              {
                "$ref": "#/components/schemas/MetadataMessage"
              },
              {
                "$ref": "#/components/schemas/ModelOutputMessage"
              },
              {
                "$ref": "#/components/schemas/SpeechUpdateMessage"
              },
              {
                "$ref": "#/components/schemas/StatusUpdateMessage"
              },
              {
                "$ref": "#/components/schemas/TranscriptMessage"
              },
              {
                "$ref": "#/components/schemas/ToolCallsMessage"
              },
              {
                "$ref": "#/components/schemas/ToolCallsResultMessage"
              },
              {
                "$ref": "#/components/schemas/UserInterruptedMessage"
              },
              {
                "$ref": "#/components/schemas/VoiceInputMessage"
              }
            ]
          }
        },
        "required": [
          "message"
        ]
      },
      "AssistantRequestServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"assistant-request\" is sent to fetch assistant configuration for an incoming call.",
            "enum": [
              "assistant-request"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ConversationUpdateServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"conversation-update\" is sent when an update is committed to the conversation history.",
            "enum": [
              "conversation-update"
            ]
          },
          "messagesOpenAIFormatted": {
            "description": "This is the most up-to-date conversation history at the time the message is sent.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "messagesOpenAIFormatted",
          "customer",
          "call"
        ]
      },
      "EndOfCallReportServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"end-of-call-report\" is sent when the call ends and post-processing is complete.",
            "enum": [
              "end-of-call-report"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the reason the call ended.",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-extra-function-failed",
              "pipeline-error-first-message-failed",
              "pipeline-error-function-filler-failed",
              "pipeline-error-function-failed",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "server-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "incoming-client-message-say-ended-call",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-blocked-free-plan",
              "pipeline-error-eleven-labs-blocked-concurrent-requests",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the message history of the call. The format is not OpenAI format but a custom VAPI format.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "recordingUrl": {
            "type": "string",
            "description": "This is the URL of the call recording."
          },
          "stereoRecordingUrl": {
            "type": "string",
            "description": "This is the URL of the stereo call recording."
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "description": "These are the artifacts from the call.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Artifact"
              }
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call."
          },
          "summary": {
            "type": "string",
            "description": "This is the summary of the call."
          },
          "analysis": {
            "description": "This is the analysis of the call.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Analysis"
              }
            ]
          }
        },
        "required": [
          "type",
          "endedReason",
          "customer",
          "call",
          "transcript",
          "summary",
          "analysis"
        ]
      },
      "FunctionCallServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"function-call\" is sent to call a function.",
            "deprecated": true,
            "enum": [
              "function-call"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "functionCall": {
            "type": "object",
            "description": "This is the function call content.",
            "deprecated": true
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "functionCall"
        ]
      },
      "HangServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"hang\" is sent when the assistant is hanging due to a delay. The delay can be caused by many factors, such as:\n- the model is too slow to respond\n- the voice is too slow to respond\n- the tool call is still waiting for a response from your server\n- etc.",
            "enum": [
              "hang"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ModelOutputServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"model-output\" is sent as the model outputs tokens.",
            "enum": [
              "model-output"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "output": {
            "type": "string",
            "description": "This is the output of the model."
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "output"
        ]
      },
      "PhoneCallControlServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"phone-call-control\" is a special type of message. When it is requested in `assistant.serverMessages`, the hangup and forwarding responsibilities are delegated to your server.",
            "enum": [
              "phone-call-control"
            ]
          },
          "request": {
            "type": "string",
            "description": "This is the request to control the phone call.",
            "enum": [
              "forward",
              "hang-up"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is the phone number to forward to if the request is \"forward\"."
          }
        },
        "required": [
          "type",
          "request",
          "customer",
          "call"
        ]
      },
      "SpeechUpdateServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"speech-update\" is sent whenever assistant or user start or stop speaking.",
            "enum": [
              "speech-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the speech update.",
            "enum": [
              "started",
              "stopped"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is the role which the speech update is for.",
            "enum": [
              "assistant",
              "user"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "status",
          "role",
          "customer",
          "call"
        ]
      },
      "StatusUpdateServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"status-update\" is sent whenever the `call.status` changes.",
            "enum": [
              "status-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the call.",
            "enum": [
              "queued",
              "ringing",
              "in-progress",
              "forwarding",
              "ended"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the reason the call ended. This is only sent if the status is \"ended\".",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-extra-function-failed",
              "pipeline-error-first-message-failed",
              "pipeline-error-function-filler-failed",
              "pipeline-error-function-failed",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "server-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "incoming-client-message-say-ended-call",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-blocked-free-plan",
              "pipeline-error-eleven-labs-blocked-concurrent-requests",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the conversation messages of the call. This is only sent if the status is \"forwarding\".",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "messagesOpenAIFormatted": {
            "description": "These are the conversation messages of the call. This is only sent if the status is \"forwarding\".",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call. This is only sent if the status is \"forwarding\"."
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is number call is being forwarded to. This is only sent if the status is \"forwarding\"."
          },
          "inboundPhoneCallDebuggingArtifacts": {
            "type": "object",
            "description": "This is the inbound phone call debugging artifacts. This is only sent if the status is \"ended\" and there was an error accepting the inbound phone call.\n\nThis will include any errors related to the \"assistant-request\" if one was made."
          }
        },
        "required": [
          "type",
          "status",
          "customer",
          "call"
        ]
      },
      "ToolCallsServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"tool-calls\" is sent to call a tool.",
            "enum": [
              "tool-calls"
            ]
          },
          "toolWithToolCallList": {
            "type": "array",
            "description": "This is the list of tools calls that the model is requesting along with the original tool configuration.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FunctionToolWithToolCall",
                  "title": "FunctionToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/GhlToolWithToolCall",
                  "title": "GhlToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/MakeToolWithToolCall",
                  "title": "MakeToolWithToolCall"
                }
              ]
            }
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "toolCallList": {
            "description": "This is the list of tool calls that the model is requesting.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        },
        "required": [
          "toolWithToolCallList",
          "customer",
          "call",
          "toolCallList"
        ]
      },
      "TransferDestinationRequestServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transfer-destination-request\" is sent when the model is requesting transfer but destination is unknown.",
            "enum": [
              "transfer-destination-request"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "TranscriptServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transcript\" is sent as transcriber outputs partial or final transcript.",
            "enum": [
              "transcript"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "role": {
            "type": "string",
            "description": "This is the role for which the transcript is for.",
            "enum": [
              "assistant",
              "user"
            ]
          },
          "transcriptType": {
            "type": "string",
            "description": "This is the type of the transcript.",
            "enum": [
              "partial",
              "final"
            ]
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript content."
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "role",
          "transcriptType",
          "transcript"
        ]
      },
      "UserInterruptedServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"user-interrupted\" is sent when the user interrupts the assistant.",
            "enum": [
              "user-interrupted"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "VoiceInputServerMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"voice-input\" is sent when a generation is requested from voice provider.",
            "enum": [
              "voice-input"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "input": {
            "type": "string",
            "description": "This is the voice input content"
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "input"
        ]
      },
      "ServerMessage": {
        "type": "object",
        "properties": {
          "message": {
            "description": "These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.\n\nThe server where the message is sent is determined by the following precedence order:\n\n1. `tool.server.url` (if configured, and only for \"tool-calls\" message)\n2. `assistant.serverUrl` (if configure)\n3. `phoneNumber.serverUrl` (if configured)\n4. `org.serverUrl` (if configured)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssistantRequestServerMessage"
              },
              {
                "$ref": "#/components/schemas/ConversationUpdateServerMessage"
              },
              {
                "$ref": "#/components/schemas/EndOfCallReportServerMessage"
              },
              {
                "$ref": "#/components/schemas/FunctionCallServerMessage"
              },
              {
                "$ref": "#/components/schemas/HangServerMessage"
              },
              {
                "$ref": "#/components/schemas/ModelOutputServerMessage"
              },
              {
                "$ref": "#/components/schemas/PhoneCallControlServerMessage"
              },
              {
                "$ref": "#/components/schemas/SpeechUpdateServerMessage"
              },
              {
                "$ref": "#/components/schemas/StatusUpdateServerMessage"
              },
              {
                "$ref": "#/components/schemas/ToolCallsServerMessage"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationRequestServerMessage"
              },
              {
                "$ref": "#/components/schemas/TranscriptServerMessage"
              },
              {
                "$ref": "#/components/schemas/UserInterruptedServerMessage"
              },
              {
                "$ref": "#/components/schemas/VoiceInputServerMessage"
              }
            ]
          }
        },
        "required": [
          "message"
        ]
      },
      "AssistantRequestMessageResponse": {
        "type": "object",
        "properties": {
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.\n\nIf you're unsure why you're getting an invalid assistant, try logging your response and send the JSON blob to POST /assistant which will return the validation errors.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is the forwarding phone number if the call should be forwarded."
          },
          "error": {
            "type": "string",
            "description": "This is the error if the call shouldn't be accepted."
          }
        }
      },
      "FunctionCallMessageResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "This is the result of the function call.",
            "deprecated": true
          },
          "forwardToClientEnabled": {
            "type": "boolean",
            "description": "This is the flag whether to forward the result to the client.",
            "deprecated": true
          }
        }
      },
      "ToolCallResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the function the model called."
          },
          "toolCallId": {
            "type": "string",
            "description": "This is the unique identifier for the tool call."
          },
          "result": {
            "type": "string",
            "description": "This is the result of the tool call."
          },
          "error": {
            "type": "string",
            "description": "This is the error message if the tool call was not successful."
          }
        },
        "required": [
          "name",
          "toolCallId"
        ]
      },
      "ToolCallsMessageResponse": {
        "type": "object",
        "properties": {
          "results": {
            "description": "These are the results of the \"tool-calls\" message.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCallResult"
            }
          },
          "error": {
            "type": "string",
            "description": "This is the error message if the tool call was not successful."
          }
        }
      },
      "TransferDestinationRequestMessageResponse": {
        "type": "object",
        "properties": {
          "destination": {
            "description": "This is the destination you'd like the call to be transferred to.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssistantTransferDestination",
                "title": "AssistantTransferDestination"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberTransferDestination",
                "title": "PhoneNumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/SipTransferDestination",
                "title": "SipTransferDestination"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "This is the error message if the transfer should not be made."
          }
        }
      },
      "ServerMessageResponse": {
        "type": "object",
        "properties": {
          "messageResponse": {
            "description": "This is the response that is expected from the server to the message.\n\nFYI, most messages don't expect a response. Only \"assistant-request\", \"tool-calls\" and \"transfer-destination-request\" do.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssistantRequestMessageResponse"
              },
              {
                "$ref": "#/components/schemas/FunctionCallMessageResponse"
              },
              {
                "$ref": "#/components/schemas/ToolCallsMessageResponse"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationRequestMessageResponse"
              }
            ]
          }
        },
        "required": [
          "messageResponse"
        ]
      }
    }
  }
}